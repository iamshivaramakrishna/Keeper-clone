{"ast":null,"code":"import _toConsumableArray from \"/home/varkala/reactjs/keeper-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { deepmerge } from '@material-ui/utils';\nimport getThemeValue from './getThemeValue';\nimport { handleBreakpoints, mergeBreakpointsInOrder } from './breakpoints';\nimport borders from './borders';\nimport display from './display';\nimport flexbox from './flexbox';\nimport grid from './grid';\nimport positions from './positions';\nimport palette from './palette';\nimport shadows from './shadows';\nimport sizing from './sizing';\nimport spacing from './spacing';\nimport typography from './typography';\nvar filterProps = [].concat(_toConsumableArray(borders.filterProps), _toConsumableArray(display.filterProps), _toConsumableArray(flexbox.filterProps), _toConsumableArray(grid.filterProps), _toConsumableArray(positions.filterProps), _toConsumableArray(palette.filterProps), _toConsumableArray(shadows.filterProps), _toConsumableArray(sizing.filterProps), _toConsumableArray(spacing.filterProps), _toConsumableArray(typography.filterProps), ['sx']);\n\nfunction objectsHaveSameKeys() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  var allKeys = objects.reduce(function (keys, object) {\n    return keys.concat(Object.keys(object));\n  }, []);\n  var union = new Set(allKeys);\n  return objects.every(function (object) {\n    return union.size === Object.keys(object).length;\n  });\n}\n\nfunction styleFunctionSx(props) {\n  var _ref = props || {},\n      styles = _ref.sx,\n      theme = _ref.theme;\n\n  if (!styles) return null;\n\n  if (typeof styles === 'function') {\n    return styles(theme);\n  }\n\n  if (typeof styles !== 'object') {\n    // value\n    return styles;\n  }\n\n  var css = {};\n  Object.keys(styles).forEach(function (styleKey) {\n    if (typeof styles[styleKey] === 'object') {\n      if (filterProps.indexOf(styleKey) !== -1) {\n        css = deepmerge(css, getThemeValue(styleKey, styles[styleKey], theme));\n      } else {\n        var breakpointsValues = handleBreakpoints({\n          theme\n        }, styles[styleKey], function (x) {\n          return {\n            [styleKey]: x\n          };\n        });\n\n        if (objectsHaveSameKeys(breakpointsValues, styles[styleKey])) {\n          var transformedValue = styleFunctionSx({\n            sx: styles[styleKey],\n            theme\n          });\n          css[styleKey] = transformedValue;\n        } else {\n          css = deepmerge(css, breakpointsValues);\n        }\n      }\n    } else if (typeof styles[styleKey] === 'function') {\n      css = deepmerge(css, {\n        [styleKey]: styles[styleKey](theme)\n      });\n    } else {\n      css = deepmerge(css, getThemeValue(styleKey, styles[styleKey], theme));\n    }\n  });\n  return mergeBreakpointsInOrder(theme.breakpoints, css);\n}\n\nstyleFunctionSx.filterProps = ['sx'];\nexport default styleFunctionSx;","map":null,"metadata":{},"sourceType":"module"}