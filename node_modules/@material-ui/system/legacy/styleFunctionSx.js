import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import { deepmerge } from '@material-ui/utils';
import getThemeValue from './getThemeValue';
import { handleBreakpoints, mergeBreakpointsInOrder } from './breakpoints';
import borders from './borders';
import display from './display';
import flexbox from './flexbox';
import grid from './grid';
import positions from './positions';
import palette from './palette';
import shadows from './shadows';
import sizing from './sizing';
import spacing from './spacing';
import typography from './typography';
var filterProps = [].concat(_toConsumableArray(borders.filterProps), _toConsumableArray(display.filterProps), _toConsumableArray(flexbox.filterProps), _toConsumableArray(grid.filterProps), _toConsumableArray(positions.filterProps), _toConsumableArray(palette.filterProps), _toConsumableArray(shadows.filterProps), _toConsumableArray(sizing.filterProps), _toConsumableArray(spacing.filterProps), _toConsumableArray(typography.filterProps), ['sx']);

function objectsHaveSameKeys() {
  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {
    objects[_key] = arguments[_key];
  }

  var allKeys = objects.reduce(function (keys, object) {
    return keys.concat(Object.keys(object));
  }, []);
  var union = new Set(allKeys);
  return objects.every(function (object) {
    return union.size === Object.keys(object).length;
  });
}

function styleFunctionSx(props) {
  var _ref = props || {},
      styles = _ref.sx,
      theme = _ref.theme;

  if (!styles) return null;

  if (typeof styles === 'function') {
    return styles(theme);
  }

  if (_typeof(styles) !== 'object') {
    // value
    return styles;
  }

  var css = {};
  Object.keys(styles).forEach(function (styleKey) {
    if (_typeof(styles[styleKey]) === 'object') {
      if (filterProps.indexOf(styleKey) !== -1) {
        css = deepmerge(css, getThemeValue(styleKey, styles[styleKey], theme));
      } else {
        var breakpointsValues = handleBreakpoints({
          theme: theme
        }, styles[styleKey], function (x) {
          return _defineProperty({}, styleKey, x);
        });

        if (objectsHaveSameKeys(breakpointsValues, styles[styleKey])) {
          var transformedValue = styleFunctionSx({
            sx: styles[styleKey],
            theme: theme
          });
          css[styleKey] = transformedValue;
        } else {
          css = deepmerge(css, breakpointsValues);
        }
      }
    } else if (typeof styles[styleKey] === 'function') {
      css = deepmerge(css, _defineProperty({}, styleKey, styles[styleKey](theme)));
    } else {
      css = deepmerge(css, getThemeValue(styleKey, styles[styleKey], theme));
    }
  });
  return mergeBreakpointsInOrder(theme.breakpoints, css);
}

styleFunctionSx.filterProps = ['sx'];
export default styleFunctionSx;