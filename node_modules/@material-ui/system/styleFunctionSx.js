"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utils = require("@material-ui/utils");

var _getThemeValue = _interopRequireDefault(require("./getThemeValue"));

var _breakpoints = require("./breakpoints");

var _borders = _interopRequireDefault(require("./borders"));

var _display = _interopRequireDefault(require("./display"));

var _flexbox = _interopRequireDefault(require("./flexbox"));

var _grid = _interopRequireDefault(require("./grid"));

var _positions = _interopRequireDefault(require("./positions"));

var _palette = _interopRequireDefault(require("./palette"));

var _shadows = _interopRequireDefault(require("./shadows"));

var _sizing = _interopRequireDefault(require("./sizing"));

var _spacing = _interopRequireDefault(require("./spacing"));

var _typography = _interopRequireDefault(require("./typography"));

const filterProps = [..._borders.default.filterProps, ..._display.default.filterProps, ..._flexbox.default.filterProps, ..._grid.default.filterProps, ..._positions.default.filterProps, ..._palette.default.filterProps, ..._shadows.default.filterProps, ..._sizing.default.filterProps, ..._spacing.default.filterProps, ..._typography.default.filterProps, 'sx'];

function objectsHaveSameKeys(...objects) {
  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
  const union = new Set(allKeys);
  return objects.every(object => union.size === Object.keys(object).length);
}

function styleFunctionSx(props) {
  const {
    sx: styles,
    theme
  } = props || {};
  if (!styles) return null;

  if (typeof styles === 'function') {
    return styles(theme);
  }

  if (typeof styles !== 'object') {
    // value
    return styles;
  }

  let css = {};
  Object.keys(styles).forEach(styleKey => {
    if (typeof styles[styleKey] === 'object') {
      if (filterProps.indexOf(styleKey) !== -1) {
        css = (0, _utils.deepmerge)(css, (0, _getThemeValue.default)(styleKey, styles[styleKey], theme));
      } else {
        const breakpointsValues = (0, _breakpoints.handleBreakpoints)({
          theme
        }, styles[styleKey], x => ({
          [styleKey]: x
        }));

        if (objectsHaveSameKeys(breakpointsValues, styles[styleKey])) {
          const transformedValue = styleFunctionSx({
            sx: styles[styleKey],
            theme
          });
          css[styleKey] = transformedValue;
        } else {
          css = (0, _utils.deepmerge)(css, breakpointsValues);
        }
      }
    } else if (typeof styles[styleKey] === 'function') {
      css = (0, _utils.deepmerge)(css, {
        [styleKey]: styles[styleKey](theme)
      });
    } else {
      css = (0, _utils.deepmerge)(css, (0, _getThemeValue.default)(styleKey, styles[styleKey], theme));
    }
  });
  return (0, _breakpoints.mergeBreakpointsInOrder)(theme.breakpoints, css);
}

styleFunctionSx.filterProps = ['sx'];
var _default = styleFunctionSx;
exports.default = _default;